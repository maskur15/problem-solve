#include<bits/stdc++.h>
using namespace std;
int x[200][200];
int pre[200][200];
int p[100000][2];
int main()
{
    int n,i,j,f=1,a,b,c,d,count=0;
    char ch;
    queue<int> q;


    cin >> n;
    for(i=0; i<n; i++)
    {
        for(j=0; j<n; j++)
        {
            cin >> ch;
            if(ch=='X')
                x[i][j]=-1;

        }
    }

    cin >> a >> b >> c >> d;
    q.push(a);
    q.push(b);
    x[a][b]=1;
    if(a==c&&b==d)
    {
        cout << 0 << endl;
        return 0;
    }
    while(!q.empty())
    {
        int current1=q.front();
        q.pop();
        int current2=q.front();
        q.pop();
        x[current1][current2]=2;
        for(i=current2+1; i<n; i++)
        {
            if(x[current1][i]==-1)
                break;
            if(x[current1][i]==0)
            {
                x[current1][i]=1;
                q.push(current1);
                q.push(i);
                p[count][0]=current1;
                p[count][1]=current2;
                pre[current1][i]=count;
                count++;
                if(current1==c&&i==d)
                {
                    f=0;
                    break;
                }
            }

        }
        for(i=current2-1; i>=0; i--)
        {
            if(x[current1][i]==-1)
                break;
            if(x[current1][i]==0)
            {
                x[current1][i]=1;
                q.push(current1);
                q.push(i);
                p[count][0]=current1;
                p[count][1]=current2;
                pre[current1][i]=count;
                count++;
                if(current1==c&&i==d)
                {
                    f=0;
                    break;
                }
            }
        }
        for(i=current1-1; i>=0; i--)
        {
            if(x[i][current2]==-1)
                break;
            if(x[i][current2]==0)
            {
                x[i][current2]=1;
                q.push(i);
                q.push(current2);
                p[count][0]=current1;
                p[count][1]=current2;
                pre[i][current2]=count;
                count++;
                if(i==c&&current2==d)
                {
                    f=0;
                    break;
                }
            }
        }
        for(i=current1+1; i<n; i++)
        {
            if(x[i][current2]==-1)
                break;
            if(x[i][current2]==0)
            {
                x[i][current2]=1;
                q.push(i);
                q.push(current2);
                p[count][0]=current1;
                p[count][1]=current2;
                pre[i][current2]=count;
                count++;
                if(i==c&&current2==d)
                {
                    f=0;
                    break;
                }
            }

        }
        if(c==current1&&d==current2)
            break;
        if(f==0)
            break;
    }

    int shortest=0;

    int c1,d1;
    while(true)
    {
        if(c==a&&d==b)
        {
            break;
        }
        shortest++;
        c1= p[pre[c][d]][0] ;
        d1= p[pre[c][d]][1] ;
        c=c1;d=d1;

       // cout << c1 << " " << d1 << endl;

    }
    cout << shortest << endl;

}
